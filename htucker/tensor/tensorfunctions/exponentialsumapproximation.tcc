exponentialSumApproximation::exponentialSumApproximation(const int _min, const int _max, const int _d):d(_d),minval(DimensionIndex(_min,_d)),maxval(DimensionIndex(_max,_d)),alpha(flens::DenseVector<flens::Array<double> >(40)),weights(flens::DenseVector<flens::Array<double> >(40)){
	weights =  0.0004541105141216453968248119678948609979,
			   0.0078530680104171971521949987930788505963,
			 0.0358442951018547386594730302239453223478,
			 0.0800511636731031012202772917385473760987,
			 0.1168715918274595083080672451580905857327,
			 0.1317468847713531808620935140141661179314 ,
			 0.1268550732122552672878103285913908848670 ,
			 0.1109657824442714362255012552904709366430,
			 0.0915407675164530429816095620509930341768,
			 0.0728296028697006614068595181654686143702,
			 0.0566262616355938613997447837050680519155,
			 0.0433600894479567821162072083218674833915,
			 0.0328421513638694122585743456754769908912,
			 0.0246657172704435717145978130063199706967,
			 0.0183917192322462027550102406370235996746 ,
			 0.0136227224770988644418135728175744958435,
			 0.0100250532523774125004520276632780095838,
			 0.0073290867029904425973310905066682163778,
			 0.0053216028826095790999957683888726966970 ,
			 0.0038362256666861645005019393166179053622,
			 0.0027443224789343381565523340582385403152,
			 0.0019471510649087046089954599194064843726,
			 0.0013693829522368219844082718491921901727,
			 0.0009538877370448752111114987457026609396,
			 0.0006575902435281989381065818672453260341,
			 0.0004482091681493420014885365430801211772 ,
			 0.0003017066922888354188646730291625125409,
			 0.0002003052463432384262700059745642040820,
			 0.0001309533404038651058759093782370673542,
			 0.0000841450289679689093394985195683861284,
			 0.0000530163906346343672674381358229543301,
			 0.0000326579433267181342724703319572348084,
			 0.0000195946088007008467557055835143813537,
			 0.0000113949728253805224946867206361372001,
			 0.0000063797866387841876792628796961806114,
			 0.0000034061919433246302751298561507290710,
			 0.0000017093587076932593639466942818314337,
			 0.0000007873796897325934882231604846542004,
			 0.0000003186056947254193096300954077315363,
			 0.0000001024294180134919968361669149146366;
	alpha = 0.0328758165954420368502493336737568796480,
			 0.0570473982762439551973880462465427143570,
			 0.0966283152617544954693135257628444634292,
			 0.1636063258412157908437819728297846211262,
			 0.2786723770321616242787599732055880963344,
			 0.4784495396399847536917683543666868217770,
			 0.8285231470543625377543975329963643616793,
			 1.4475289223590702735247615073888027836801,
			 2.5522100303561091739872057626570267530042,
			 4.5426301651741418010516104786233881895896,
			 8.1651768488703318207497239278325196210062 ,
			14.8281159280173661825508180100996469263919,
			27.2202001694938288487574107321620431321207,
			50.5395968142454580715461354145645600510761,
			94.9698324334290623002785558526284148683771,
			180.7430429547675229534631213823558937292546,
			348.6595709978226785563659717581685981713235,
			682.3160325424825219386981700608885148540139 ,
			1355.9285760062651674529021761372860055416822,
			2739.2321520142396620300928589131217449903488,
			5632.4067005890412889179685862472979351878166,
			11804.1327408178242155400994306546635925769806,
			25254.1956632226066332691516436170786619186401,
			55255.5977602627446430005875299684703350067139,
			123898.7837399924441115217632614076137542724609,
			285403.3681506335250048778107156977057456970215 ,
			677314.9416636431666347561986185610294342041016,
			1661627.5164404432468927552690729498863220214844,
			4231169.6896806240947626065462827682495117187500,
			11239234.2676030291650022263638675212860107421875,
			31336866.8801911466143792495131492614746093750000,
			92434878.3605544002202805131673812866210937500000,
			291426049.6279058846412226557731628417968750000000,
			995657663.5402839354937896132469177246093750000000 ,
			3757776658.0723961133044213056564331054687500000000,
			16116802909.0660596201196312904357910156250000000000,
			82144510740.0004426687955856323242187500000000000000,
			538206356175.0550399124622344970703125000000000000000,
			5341579170601.2921476364135742187500000000000000000000,
			130450953442068.3405914306640625000000000000000000000000;
}

exponentialSumApproximation::exponentialSumApproximation(const DimensionIndex &_min, const DimensionIndex &_max):d(_min.length()),minval(_min),maxval(_max),alpha(flens::DenseVector<flens::Array<double> >(40)),weights(flens::DenseVector<flens::Array<double> >(40)){
	assert(_min.length() == _max.length());
	weights =  0.0004541105141216453968248119678948609979,
			   0.0078530680104171971521949987930788505963,
			 0.0358442951018547386594730302239453223478,
			 0.0800511636731031012202772917385473760987,
			 0.1168715918274595083080672451580905857327,
			 0.1317468847713531808620935140141661179314 ,
			 0.1268550732122552672878103285913908848670 ,
			 0.1109657824442714362255012552904709366430,
			 0.0915407675164530429816095620509930341768,
			 0.0728296028697006614068595181654686143702,
			 0.0566262616355938613997447837050680519155,
			 0.0433600894479567821162072083218674833915,
			 0.0328421513638694122585743456754769908912,
			 0.0246657172704435717145978130063199706967,
			 0.0183917192322462027550102406370235996746 ,
			 0.0136227224770988644418135728175744958435,
			 0.0100250532523774125004520276632780095838,
			 0.0073290867029904425973310905066682163778,
			 0.0053216028826095790999957683888726966970 ,
			 0.0038362256666861645005019393166179053622,
			 0.0027443224789343381565523340582385403152,
			 0.0019471510649087046089954599194064843726,
			 0.0013693829522368219844082718491921901727,
			 0.0009538877370448752111114987457026609396,
			 0.0006575902435281989381065818672453260341,
			 0.0004482091681493420014885365430801211772 ,
			 0.0003017066922888354188646730291625125409,
			 0.0002003052463432384262700059745642040820,
			 0.0001309533404038651058759093782370673542,
			 0.0000841450289679689093394985195683861284,
			 0.0000530163906346343672674381358229543301,
			 0.0000326579433267181342724703319572348084,
			 0.0000195946088007008467557055835143813537,
			 0.0000113949728253805224946867206361372001,
			 0.0000063797866387841876792628796961806114,
			 0.0000034061919433246302751298561507290710,
			 0.0000017093587076932593639466942818314337,
			 0.0000007873796897325934882231604846542004,
			 0.0000003186056947254193096300954077315363,
			 0.0000001024294180134919968361669149146366;
	alpha = 0.0328758165954420368502493336737568796480,
			 0.0570473982762439551973880462465427143570,
			 0.0966283152617544954693135257628444634292,
			 0.1636063258412157908437819728297846211262,
			 0.2786723770321616242787599732055880963344,
			 0.4784495396399847536917683543666868217770,
			 0.8285231470543625377543975329963643616793,
			 1.4475289223590702735247615073888027836801,
			 2.5522100303561091739872057626570267530042,
			 4.5426301651741418010516104786233881895896,
			 8.1651768488703318207497239278325196210062 ,
			14.8281159280173661825508180100996469263919,
			27.2202001694938288487574107321620431321207,
			50.5395968142454580715461354145645600510761,
			94.9698324334290623002785558526284148683771,
			180.7430429547675229534631213823558937292546,
			348.6595709978226785563659717581685981713235,
			682.3160325424825219386981700608885148540139 ,
			1355.9285760062651674529021761372860055416822,
			2739.2321520142396620300928589131217449903488,
			5632.4067005890412889179685862472979351878166,
			11804.1327408178242155400994306546635925769806,
			25254.1956632226066332691516436170786619186401,
			55255.5977602627446430005875299684703350067139,
			123898.7837399924441115217632614076137542724609,
			285403.3681506335250048778107156977057456970215 ,
			677314.9416636431666347561986185610294342041016,
			1661627.5164404432468927552690729498863220214844,
			4231169.6896806240947626065462827682495117187500,
			11239234.2676030291650022263638675212860107421875,
			31336866.8801911466143792495131492614746093750000,
			92434878.3605544002202805131673812866210937500000,
			291426049.6279058846412226557731628417968750000000,
			995657663.5402839354937896132469177246093750000000 ,
			3757776658.0723961133044213056564331054687500000000,
			16116802909.0660596201196312904357910156250000000000,
			82144510740.0004426687955856323242187500000000000000,
			538206356175.0550399124622344970703125000000000000000,
			5341579170601.2921476364135742187500000000000000000000,
			130450953442068.3405914306640625000000000000000000000000;
}

exponentialSumApproximation::exponentialSumApproximation(const exponentialSumApproximation & copy){
	exponentialSumApproximation(copy.getmin(),copy.getmax());
}

double 
exponentialSumApproximation::operator() (const DimensionIndex &vals) const{
	double approx = 0.0;
	double len;
	double frac;
	for(int i = 1; i<= 40; ++i){
		double prod = 0.0;
		for(int j = 0; j < vals.length(); ++j){
			len = (maxval[j]-minval[j]+1.0);
			frac = ((double) vals[j])/len;
			prod -= frac*frac *alpha(i);
			//prod*= exp(-list(j)*list(j)*alpha(i)/list.length());
		}
		
		approx += weights(i)*exp(prod);
	}

	return approx;
}

int 
exponentialSumApproximation::dim() const{
	return d;
}

const DimensionIndex & 
exponentialSumApproximation::getmin() const{
	return minval;
}

const DimensionIndex &
exponentialSumApproximation::getmax() const{
	return maxval;
}

DenseVectorList<double> 
exponentialSumApproximation::getVectors() const{
	DenseVectorList<double> list;
	double frac;
	int len;
	for(int i = 0; i< d; i++){
		for(int j = 1; j<= 40; j++){
			len = maxval[i]-minval[i]+1;
			flens::DenseVector<flens::Array<double> > tmp(len);
			for(int l= tmp.firstIndex(); l<=tmp.lastIndex(); ++l){
				//std::cout << "i= " << i << "  j= " << j << "    " << (minvec(i)+l-tmp.firstIndex()) << std::endl;
				frac = (minval[i]+l-tmp.firstIndex() + 0.0)/((double) len);
				if(i == 1){
					tmp(l) = weights(j)*exp(-frac*frac*alpha(j));
				} else {
					tmp(l) = exp(-frac*frac*alpha(j));
				}

			}
			list.add(tmp);
		}
	}

	return list;
}

bool
exponentialSumApproximation::vecEval() const{
	return false;
}

void  
exponentialSumApproximation::vec(const DimensionIndex & vals, const int dim, flens::DenseVector<flens::Array<type> > & vec) const{
}



exponentialSumApproximation &
exponentialSumApproximation::operator=(const exponentialSumApproximation & copy){
	this->d = copy.dim();
	this->minval = copy.getmin();
	this->maxval = copy.getmax();
    return *this;
}
