inverseNormApproximation::inverseNormApproximation(const int _min, const int _max, const int _d):d(_d),minval(DimensionIndex(_min,_d)),maxval(DimensionIndex(_max,_d)),alpha(flens::DenseVector<flens::Array<double> >(35)),weights(flens::DenseVector<flens::Array<double> >(35)){
	weights =  0.0003476617162031463656887349288667626857,
		 0.0003656677800731512040516686207159910427,
		 0.0004075639038080694722811763840587123697,
		 0.0004843102689961686493529664332240158853,
		 0.0006075484362407267528193426119921538575,
		 0.0007860621238313433964849066446726327806,
		 0.0010286920148215165835244833104043793437,
		 0.0013484039992954368087911095805929428959,
		 0.0017637932498565288986423389163381292288,
		 0.0022995948323400161628149234675083656398,
		 0.0029874656853097934646253271400578865880,
		 0.0038672614791946895807455515312045513099,
		 0.0049887848083617705673121177356588162866,
		 0.0064140049762051946081513006427121670328,
		 0.0082197972649914829865058925849330417890,
		 0.0105012852751240196090380674132092053696,
		 0.0133758979709688672253838190480401681981,
		 0.0169882797026389577249398925989920527968,
		 0.0215162197131539093567588515412691840822,
		 0.0271778000398019895103514419545942537582,
		 0.0342399988121945339294440423250076577233,
		 0.0430290321349169279780387271233665913428,
		 0.0539427787599617519049503139294543530013,
		 0.0674657211055092835482404310665227598065,
		 0.0841869982556718884943842105827993549383,
		 0.1048225290121168909272938649102080432840,
		 0.1302430953236043887537645713514677936473,
		 0.1615128713218071510428555659366622876405,
		 0.1999503386727134369738609689926001067306,
		 0.2472453213059679058203037954610792326093,
		 0.3057312880122441022998601434235155238639,
		 0.3791210128165055750809782353361043760742,
		 0.4747822440254026090267897020069653990504,
		 0.6124014951064692475124137671649293679366,
		 0.8770631816903148868821808725737554368607;
	
	alpha = 0.0000000235400856956305055878655722424688,
		 0.0000002190687866559873968066208739485593 ,
		 0.0000006537664626626933778312767948510514,
		 0.0000014417390459603761640437794711739619,
		 0.0000028249191933610997732134884831732080,
		 0.0000052619966475500025806047219888226911,
		 0.0000095660563720937891498760672094321504,
		 0.0000171390025138215001011925741410298063,
		 0.0000303721353159007172786038744071216398,
		 0.0000533144330199730628410098153685536815,
		 0.0000927727305168396906702150201057873596,
		 0.0001601089695752882413498063818822758630,
		 0.0002741571631011130146831419608340410510,
		 0.0004659284936908316930128467917102824680,
		 0.0007861555388635028741309694502552296580,
		 0.0013173193525957165981990005295537704555,
		 0.0021927170213724243173581210115258288695,
		 0.0036265296748535230252248606763743055126,
		 0.0059609930028473755913377739659719800613,
		 0.0097400298129714036937578519603775362157,
		 0.0158236368205604346909168636536868746134,
		 0.0255647567178983044495056784622954992869,
		 0.0410815423918531026012130723951143451700,
		 0.0656746545943673863224049509768054377901,
		 0.1044642348460616351570376912627491350349,
		 0.1653585520401501045929587227489854228679,
		 0.2605224824709100300400982375137459712278,
		 0.4086001179322432018067596387611573049981,
		 0.6380846956001181719268962322377802820483,
		 0.9924778169025332579173716285314554852448,
		 1.5384103118403334514111696629257153290382,
		 2.3793008307260859670196478932169270592567,
		 3.6817340408947272592000976576542825569049,
		 5.7409136583061526177239330959167773471563,
		 9.2321686012605892112867222998318084137281;
}


inverseNormApproximation::inverseNormApproximation(const DimensionIndex &_min, const DimensionIndex &_max):d(_min.length()),minval(_min),maxval(_max),alpha(flens::DenseVector<flens::Array<double> >(35)),weights(flens::DenseVector<flens::Array<double> >(35)){
	assert(_min.length() == _max.length());
	weights =  0.0003476617162031463656887349288667626857,
		 0.0003656677800731512040516686207159910427,
		 0.0004075639038080694722811763840587123697,
		 0.0004843102689961686493529664332240158853,
		 0.0006075484362407267528193426119921538575,
		 0.0007860621238313433964849066446726327806,
		 0.0010286920148215165835244833104043793437,
		 0.0013484039992954368087911095805929428959,
		 0.0017637932498565288986423389163381292288,
		 0.0022995948323400161628149234675083656398,
		 0.0029874656853097934646253271400578865880,
		 0.0038672614791946895807455515312045513099,
		 0.0049887848083617705673121177356588162866,
		 0.0064140049762051946081513006427121670328,
		 0.0082197972649914829865058925849330417890,
		 0.0105012852751240196090380674132092053696,
		 0.0133758979709688672253838190480401681981,
		 0.0169882797026389577249398925989920527968,
		 0.0215162197131539093567588515412691840822,
		 0.0271778000398019895103514419545942537582,
		 0.0342399988121945339294440423250076577233,
		 0.0430290321349169279780387271233665913428,
		 0.0539427787599617519049503139294543530013,
		 0.0674657211055092835482404310665227598065,
		 0.0841869982556718884943842105827993549383,
		 0.1048225290121168909272938649102080432840,
		 0.1302430953236043887537645713514677936473,
		 0.1615128713218071510428555659366622876405,
		 0.1999503386727134369738609689926001067306,
		 0.2472453213059679058203037954610792326093,
		 0.3057312880122441022998601434235155238639,
		 0.3791210128165055750809782353361043760742,
		 0.4747822440254026090267897020069653990504,
		 0.6124014951064692475124137671649293679366,
		 0.8770631816903148868821808725737554368607;
	
	alpha = 0.0000000235400856956305055878655722424688,
		 0.0000002190687866559873968066208739485593 ,
		 0.0000006537664626626933778312767948510514,
		 0.0000014417390459603761640437794711739619,
		 0.0000028249191933610997732134884831732080,
		 0.0000052619966475500025806047219888226911,
		 0.0000095660563720937891498760672094321504,
		 0.0000171390025138215001011925741410298063,
		 0.0000303721353159007172786038744071216398,
		 0.0000533144330199730628410098153685536815,
		 0.0000927727305168396906702150201057873596,
		 0.0001601089695752882413498063818822758630,
		 0.0002741571631011130146831419608340410510,
		 0.0004659284936908316930128467917102824680,
		 0.0007861555388635028741309694502552296580,
		 0.0013173193525957165981990005295537704555,
		 0.0021927170213724243173581210115258288695,
		 0.0036265296748535230252248606763743055126,
		 0.0059609930028473755913377739659719800613,
		 0.0097400298129714036937578519603775362157,
		 0.0158236368205604346909168636536868746134,
		 0.0255647567178983044495056784622954992869,
		 0.0410815423918531026012130723951143451700,
		 0.0656746545943673863224049509768054377901,
		 0.1044642348460616351570376912627491350349,
		 0.1653585520401501045929587227489854228679,
		 0.2605224824709100300400982375137459712278,
		 0.4086001179322432018067596387611573049981,
		 0.6380846956001181719268962322377802820483,
		 0.9924778169025332579173716285314554852448,
		 1.5384103118403334514111696629257153290382,
		 2.3793008307260859670196478932169270592567,
		 3.6817340408947272592000976576542825569049,
		 5.7409136583061526177239330959167773471563,
		 9.2321686012605892112867222998318084137281;
}

inverseNormApproximation::inverseNormApproximation(const inverseNormApproximation &copy){
	inverseNormApproximation(copy.getmin(),copy.getmax());
}

double 
inverseNormApproximation::operator()(const DimensionIndex &vals) const{
	assert(vals.length() == d);
	
	double approx = 0.0;

	for(int i = 1; i<= 35; ++i){
		double prod = 0.0;
		for(int j = 0; j < vals.length(); ++j){
			prod -= vals[j]*vals[j]*alpha(i);
		}
		approx += weights(i)*exp(prod);
	}

	return approx;
}


int 
inverseNormApproximation::dim() const{
	return d;
}

const DimensionIndex &
inverseNormApproximation::getmin() const{
	return minval;
}

const DimensionIndex &
inverseNormApproximation::getmax() const{
	return maxval;
}

DenseVectorList<double>
inverseNormApproximation::getVectors() const{
	DenseVectorList<double> list;

	for(int i = 0; i< d; i++){
		for(int j = 1; j<= 35; j++){
			flens::DenseVector<flens::Array<double> > tmp(maxval[i]-minval[i]+1);
			for(int l= tmp.firstIndex(); l<=tmp.lastIndex(); ++l){
				//std::cout << "i= " << i << "  j= " << j << "    " << (minvec(i)+l-tmp.firstIndex()) << std::endl;
				if(i == 1){
					tmp(l) = weights(j)*exp(-(minval[i]+l-tmp.firstIndex())*(minval[i]+l-tmp.firstIndex())*alpha(j));
				} else {
					tmp(l) = exp(-(minval[i]+l-tmp.firstIndex())*(minval[i]+l-tmp.firstIndex())*alpha(j));
				
				}

			}
			list.add(tmp);
		}
	}
	return list;

}

bool 
inverseNormApproximation::vecEval() const{
	return false;
}

void  
inverseNormApproximation::vec(const DimensionIndex & vals, const int dim, flens::DenseVector<flens::Array<type> > & vec) const{

}



inverseNormApproximation &
inverseNormApproximation::operator=(const inverseNormApproximation & copy){
	this->d = copy.dim();
	this->minval = copy.getmin();
	this->maxval = copy.getmax();
    return *this;
}
